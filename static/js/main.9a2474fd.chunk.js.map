{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","blurBackground","setState","filterClass","h1Style","opacity","unblurBackground","setContainerBackgroundColor","e","arguments","length","undefined","color","screen","window","innerWidth","innerHeight","clientX","clientY","appContainerStyle","backgroundColor","componentDidMount","toConsumableArray","document","querySelectorAll","forEach","el","onmouseenter","bind","assertThisInitialized","onmouseleave","onmousemove","state","contentStyle","_this2","react_default","a","createElement","className","ref","app","style","href","target","rel","viewBox","d","Component","Boolean","location","hostname","match","ReactDOM","render","src_components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a2474fd.chunk.js","sourcesContent":["import React, {\n    Component\n} from 'react';\nimport './App.scss';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterClass: \"\",\n            appContainerStyle: {\n                backgroundColor: 'rgba(0,0,0, .5)',\n            },\n            h1Style: {\n                opacity: 1\n            },\n            contentStyle: {\n                opacity: 1\n            }\n        }\n    }\n\n    blurBackground = () => {\n        this.setState({\n            filterClass: \"grayscaled\",\n            h1Style: {\n                opacity: 1\n            }\n        })\n    }\n    unblurBackground = () => {\n        this.setState({\n            filterClass: \"\",\n            h1Style: {\n                opacity: 1\n            }\n        })\n    }\n\n    setContainerBackgroundColor = (e = null, color = 'transparent') => {\n        if ( e )\n        {\n            // w - 0.1\n            // c - x\n            // mousemove background darkness\n            let screen = window.innerWidth + window.innerHeight\n            color = 'rgba(0, 0, 0, ' + ((e.clientX + e.clientY) * .5/ screen) + ')'\n        }\n        this.setState({\n            appContainerStyle: {backgroundColor: color}\n        })\n    }\n\n    componentDidMount = () => {\n        // onhover link grayscale background\n        [...document.querySelectorAll('a')].forEach(el => {\n          el.onmouseenter = this.blurBackground.bind(this)\n          el.onmouseleave = this.unblurBackground.bind(this)\n        });\n\n        document.onmousemove = (e) => {this.setContainerBackgroundColor(e)};\n    }\n\n    render() {\n        return (\n            <div className={\"App \" + this.state.filterClass}\n              ref={app => this.app = app}\n            >\n                <div className=\"App-container\" style={this.state.appContainerStyle}>\n                    <header className=\"header\">\n                        <div>\n                            {/* <a>Vlad Timofeev</a>\n                            <p>Some text is herew</p> */}\n                        </div>\n                        <div className=\"socialLinks\">\n                            <a href=\"/wat\">wat</a>\n                        </div>\n                        {/* <div className=\"scrollable\">\n                            <p><a href=\"\">Some great link</a></p>\n                        </div> */}\n                    </header>\n                    <div className={\"centerContent \" + this.state.filterClass} style={this.state.contentStyle} >\n                        <h1 style={this.state.h1Style} className=\"zlitch\">Vlad Timofeev</h1>\n                        <p>in adventure of <a href=\"https://brainhub.co/\" target=\"_blank\" rel=\"noopener noreferrer\">tech</a>, <a href=\"https://brainhub.co/#!/projects/gr\" target=\"_blank\" rel=\"noopener noreferrer\">gadgets</a> and <a href=\"/\">cars</a>.</p>\n                        <div className=\"socialLinks\">\n                            <a href=\"https://www.facebook.com/teemofeev\" target=\"_blank\" rel=\"noopener noreferrer\">facebook</a>\n                            <a href=\"mailto:timadevelop@gmail.com\" target=\"_blank\" rel=\"noopener noreferrer\">gmail</a>\n                            <a href=\"https://twitter.com/teemofeev\" target=\"_blank\" rel=\"noopener noreferrer\">twitter</a>\n                            <a href=\"https://github.com/timadevelop\" target=\"_blank\" rel=\"noopener noreferrer\">github</a>\n                        </div>\n                        \n                    </div>\n                    <footer className=\"footer\">\n                            <div></div>\n                            <div>\n                                <p>Made with</p>\n                                {/* <svg className=\"spin\" width=\"30\" height=\"23\">\n                                    <polygon style={\"stroke-linejoin:miter; stroke:black; stroke-width:5; fill: red;\"}\n                                points={\"100 100, 150 150, 200 100, 200 75, 185 60, 165 60, 150 75, 135 60, 115 60, 100 75, 100 100\"} />\n                                </svg> */}\n                                <svg className=\"heart\" viewBox=\"0 0 32 32\">\n                                    <path d=\"M23.6,0c-3.4,0-6.3,2.7-7.6,5.6C14.7,2.7,11.8,0,8.4,0C3.8,0,0,3.8,0,8.4c0,9.4,9.5,11.9,16,21.2\n                                        c6.1-9.3,16-12.1,16-21.2C32,3.8,28.2,0,23.6,0z\"/>\n                                </svg> \n                                <p> in Ukraine</p>\n                            </div>\n                            <div></div>\n                            {/* <div className=\"scrollable\">\n                                <p><a href=\"\">Some great link</a></p>\n                            </div> */}\n                    </footer>\n                </div>\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\"\n          onMouseEnter={this.blurBackground.bind(this)}\n          onMouseLeave={this.unblurBackground.bind(this)}\n           />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\" rel=\"noopener noreferrer\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header> */}\n      </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}